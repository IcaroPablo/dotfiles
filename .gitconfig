[user]
    name = √çcaro Andrade
    email = ic4ro.p4blo@gmail.com

# [sendemail]
#     confirm = auto
#     smtpEncryption = ssl
#     smtpServerPort = 465
#     chainReplyTo = false

# [include]
#     path = ~/.gitconfig-common

# [includeIf "gitdir:~/repos/redhat/"]
#     path = ~/.gitconfig-work

[init]
    defaultBranch = main

[push]
    default = current
#    gpgSign = if-asked

[core]
    pager = bat
#     autocrlf = input
#     pager = delta
#     quotePath = false

[pull]
    rebase = true

[fetch]
    prune = true

# [credential]
#     helper = !pass-git-helper

# [delta]
#     navigate = true
#     light = false

[format]
    signOff = true

[interactive]
#     diffFilter = delta --color-only
    singleKey = true

[log]
    date = iso
    decorate = true

[diff]
    tool = nvim
    submodule = log
    colorMoved = default

[difftool]
    prompt = true

[merge]
    conflictstyle = diff3
    tool = nvim

[mergetool]
    prompt = false

[rerere]
    enabled = true

[alias]
    ## am (a+)
    aa = add --all
    # aa = am --abort

    ## add (a+)
    ap = add -p
    au = add -u
    ai = add --interactive

    ## branch (bl*)
    bl = branch -vv
    blr = branch -rv

    ## commit (c*)
    c = commit
    cm = commit -m
    cf = commit --fixup
    csq = commit --squash
    cs = commit -s
    # amends
    ca = commit --amend
    can = ca --no-edit
    cas = ca -s
    # no-verifies
    cnv = commit --no-verify

    ds = diff --staged

    ## fetch (f+)
    fa = fetch --all

    ## log (l+)
    # all
    lnm = log --oneline --graph
    lostm = log --oneline --stat
    lpm = log -p
    lnns = ln --name-status
    lg = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit
	; ls = log --pretty=format:\"%C(yellow)%h %C(blue)%ad%C(red)%d %C(reset)%s%C(green) [%cn]\" --decorate --date=short
	lg-full = log --name-status --pretty=fuller

    # no-merges
    ln = lnm --no-merges
    lp = lpm --no-merges
    lost = lostm --no-merges

    ## push (p+)
    pf = push -f

    # pull
    psn = "!f(){\
            TRACKING=origin; \
            case $# in \
                0) \
                    BRANCH=$(git get-default-branch);; \
                1) \
                    BRANCH=$1;; \
                2) \
                    BRANCH=$2; \
                    TRACKING=$1;; \
            esac; \
            git stash -S; \
            BEFORE=$(git stash list | wc -l); \
            git stash; \
            AFTER=$(git stash list | wc -l); \
            git fetch $TRACKING; \
            UPDATE=0; \
            test $(git branch --show-current) = $BRANCH || UPDATE=1; \
            test $UPDATE = 1 && git checkout $BRANCH; \
            UNPOP=0; \
            git pull $TRACKING $BRANCH && UNPOP=1; \
            test $UPDATE = 1 && { \
                git checkout -; \
                git ro $TRACKING $BRANCH && UNPOP=1; \
            }; \
            test $UNPOP = 1 && { \
                test $BEFORE = $AFTER || git stash pop; \
                echo \"updated\"; \
            }; \
        };f"

    ## rebase (r+ ~[v])
    ra = rebase --abort
    rc = rebase --continue
    ret = rebase --edit-todo
    ri = rebase -i
    ria = ri --autosquash

    ## reset
    rh = reset --hard
    rs = reset --soft HEAD^

    ## remote (r+)
    rv = remote -v
    drb = branch -dr #remote/branch

    ## stash (s+ ~[t])
    ssp = stash show -p
    sd = stash drop
    sp = stash pop

    ## status (st*)
    st = status -sb
    sp = --paginate status
    us = restore --staged .
    rp = restore -p

    ## misc

    # get a commit hash
    get-hash = log --format="%H" -n1

    # show staged content
    staged = diff --staged

    # get the root of the repo
    top = rev-parse --show-toplevel

    ### functions

    ## temporary commits
    tempsave = "!f(){\
            NUM=${1:-0};\
            git commit --no-gpg-sign --no-verify -m \"temp $NUM\";\
        };f"
    save = "!f(){\
            NUM=${1:-0};\
            git cs -m \"save $NUM\";\
        };f"

    # get default branch
    get-default-branch = "!f(){\
            git symbolic-ref refs/remotes/${1:-origin}/HEAD | cut -d'/' -f4;\
        };f"

    ## reverse the log output
    lrf = "!f(){\
            git log --reverse ${1:-$(git get-default-branch)}..${2:-@};\
        };f"

    # reverse log line output
    lnf = "!f(){\
            git ln ${1:-$(git get-default-branch)}..${2:-@};\
        };f"

    # get patch-set log
    lpf = "!f(){\
            git lp ${1:-$(git get-default-branch)}..${2:-@};\
        };f"

    ## reverse patch-set log
    lprf = "!f(){\
            git lp --reverse ${1:-$(git get-default-branch)}..${2:-@};\
        };f"

    ## rebase onto a branch
    # first we test arguments, if there are two, we assume the first is the
    # tracking
    # then rebase the current branch onto the specified
    ro = "!f(){\
            case $# in \
                0) \
                    BRANCH=$(git get-default-branch); \
                    TRACKING=origin;; \
                1) \
                    BRANCH=$1; \
                    TRACKING=origin;; \
                2) \
                    BRANCH=$2; \
                    TRACKING=$1;; \
            esac; \
            git rebase $(git branch --show-current)~ --onto $(git get-hash $TRACKING/$BRANCH);\
        };f"

    ## update working branch
    # it can either be to work again on top of another branch (usually main) or
    # to update the current branch
    #
    # first we test arguments, if there are two, we assume the first is the
    # tracking branch and the second is the branch itself
    # then, if we're updating the current branch, we simply stash, pull and pop
    # if we're updating another branch, we stash, checkout the branch, pull,
    # checkout back, rebase and then pop
    update = "!f(){\
            TRACKING=origin; \
            case $# in \
                0) \
                    BRANCH=$(git get-default-branch);; \
                1) \
                    BRANCH=$1;; \
                2) \
                    BRANCH=$2; \
                    TRACKING=$1;; \
            esac; \
            git stash -S; \
            BEFORE=$(git stash list | wc -l); \
            git stash; \
            AFTER=$(git stash list | wc -l); \
            git fetch $TRACKING; \
            UPDATE=0; \
            test $(git branch --show-current) = $BRANCH || UPDATE=1; \
            test $UPDATE = 1 && git checkout $BRANCH; \
            UNPOP=0; \
            git pull $TRACKING $BRANCH && UNPOP=1; \
            test $UPDATE = 1 && { \
                git checkout -; \
                git ro $TRACKING $BRANCH && UNPOP=1; \
            }; \
            test $UNPOP = 1 && { \
                test $BEFORE = $AFTER || git stash pop; \
                echo \"updated\"; \
            }; \
        };f"

# [filter "lfs"]
# 	clean = git-lfs clean -- %f
# 	smudge = git-lfs smudge -- %f
# 	process = git-lfs filter-process
# 	required = true   us = restore --staged .
